// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace brew_logger_backend.Migrations
{
    [DbContext(typeof(BeerContext))]
    [Migration("20220921074636_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("brew_logger_backend.Models.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlcoholPercentage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BatchNumber")
                        .HasColumnType("int");

                    b.Property<string>("Brewers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalGravity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinalProductLiters")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalGravity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricerPerLiter")
                        .HasColumnType("int");

                    b.Property<int>("TotalIngredientsPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Beers");
                });

            modelBuilder.Entity("brew_logger_backend.Models.BitteringCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("AlfaSyre")
                        .HasColumnType("real");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<int>("FinishedBrewLiters")
                        .HasColumnType("int");

                    b.Property<int>("IBU")
                        .HasColumnType("int");

                    b.Property<string>("MinutesNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Yield")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId")
                        .IsUnique();

                    b.ToTable("BitteringCalculations");
                });

            modelBuilder.Entity("brew_logger_backend.Models.FermentingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("FermentationStarted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FermentationStopped")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Liter")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeerId")
                        .IsUnique();

                    b.ToTable("FermentingDetails");
                });

            modelBuilder.Entity("brew_logger_backend.Models.Hop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Alfa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("Grams")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GramsPerLiter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.ToTable("Hops");
                });

            modelBuilder.Entity("brew_logger_backend.Models.Malt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("Kg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Part")
                        .HasColumnType("real");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.ToTable("Malts");
                });

            modelBuilder.Entity("brew_logger_backend.Models.MashingProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<int>("KiloGramsOfMalt")
                        .HasColumnType("int");

                    b.Property<int>("LitersOfWater")
                        .HasColumnType("int");

                    b.Property<int>("MaltTemperature")
                        .HasColumnType("int");

                    b.Property<int>("TemperatureOfWater")
                        .HasColumnType("int");

                    b.Property<int>("WantedWaterTemperature")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId")
                        .IsUnique();

                    b.ToTable("MashingProcedures");
                });

            modelBuilder.Entity("brew_logger_backend.Models.WaterTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<string>("BoilEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoilLiters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoilStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoilTemperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingLiters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingTemperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MashEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MashLiters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MashStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MashTemperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpargeEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpargeLiters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpargeStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpargeTemperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterHeatingEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterHeatingLiters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterHeatingStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterHeatingTemperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeerId")
                        .IsUnique();

                    b.ToTable("WaterTreatments");
                });

            modelBuilder.Entity("brew_logger_backend.Models.BitteringCalculation", b =>
                {
                    b.HasOne("brew_logger_backend.Models.Beer", "Beer")
                        .WithOne("BitteringCalculation")
                        .HasForeignKey("brew_logger_backend.Models.BitteringCalculation", "BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");
                });

            modelBuilder.Entity("brew_logger_backend.Models.FermentingDetail", b =>
                {
                    b.HasOne("brew_logger_backend.Models.Beer", "Beer")
                        .WithOne("YeastingDetails")
                        .HasForeignKey("brew_logger_backend.Models.FermentingDetail", "BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");
                });

            modelBuilder.Entity("brew_logger_backend.Models.Hop", b =>
                {
                    b.HasOne("brew_logger_backend.Models.Beer", "Beer")
                        .WithMany("Hops")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");
                });

            modelBuilder.Entity("brew_logger_backend.Models.Malt", b =>
                {
                    b.HasOne("brew_logger_backend.Models.Beer", "Beer")
                        .WithMany("Malts")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");
                });

            modelBuilder.Entity("brew_logger_backend.Models.MashingProcedure", b =>
                {
                    b.HasOne("brew_logger_backend.Models.Beer", "Beer")
                        .WithOne("MashingProcedure")
                        .HasForeignKey("brew_logger_backend.Models.MashingProcedure", "BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");
                });

            modelBuilder.Entity("brew_logger_backend.Models.WaterTreatment", b =>
                {
                    b.HasOne("brew_logger_backend.Models.Beer", "Beer")
                        .WithOne("WaterTreatment")
                        .HasForeignKey("brew_logger_backend.Models.WaterTreatment", "BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");
                });

            modelBuilder.Entity("brew_logger_backend.Models.Beer", b =>
                {
                    b.Navigation("BitteringCalculation")
                        .IsRequired();

                    b.Navigation("Hops");

                    b.Navigation("Malts");

                    b.Navigation("MashingProcedure")
                        .IsRequired();

                    b.Navigation("WaterTreatment")
                        .IsRequired();

                    b.Navigation("YeastingDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
